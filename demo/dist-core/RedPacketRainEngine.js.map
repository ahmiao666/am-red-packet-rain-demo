{"version":3,"file":"RedPacketRainEngine.js","sources":["../src/src/core/RedPacketRainEngine.ts"],"sourcesContent":["import {\n  RedPacket,\n  RedPacketRainConfig,\n  RedPacketClickEvent,\n  AnimationState,\n  PerformanceStats,\n  RedPacketEventCallback,\n  AnimationStateCallback,\n  PerformanceCallback,\n  Particle,\n  ParticleConfig,\n} from \"./types\";\n\n// 默认配置\nconst DEFAULT_CONFIG: RedPacketRainConfig = {\n  containerWidth: \"100%\",\n  containerHeight: \"100%\",\n  count: 20, // 🎯 设置合理的默认值\n  density: 5,\n  speed: {\n    min: 2,\n    max: 6,\n  },\n  size: {\n    width: 60,\n    height: 80,\n  },\n  rotation: true,\n  rotationSpeed: {\n    min: -0.02,\n    max: 0.02,\n  },\n  enablePerformanceMode: true,\n  maxFPS: 60,\n  qualityMaxFPS: 144,\n  clickEffect: true,\n  isParticle: true,\n};\n\nexport class RedPacketRainEngine {\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private config: RedPacketRainConfig;\n  private redPackets: RedPacket[] = [];\n  private animationId: number | null = null;\n  private isRunning = false;\n  private isPaused = false;\n  private lastFrameTime = 0;\n  private frameCount = 0;\n  private lastFpsTime = 0;\n  private currentFPS = 0;\n  private lastSpawnTime = 0;\n\n  // 实际尺寸\n  private actualWidth = 800;\n  private actualHeight = 600;\n\n  // 对象池\n  private redPacketPool: RedPacket[] = [];\n  private poolSize = 50;\n  private redPacketDataIndex = 0;\n\n  // 事件回调\n  private onRedPacketClickCallback?: RedPacketEventCallback;\n  private onAnimationStateChangeCallback?: AnimationStateCallback;\n  private onPerformanceUpdateCallback?: PerformanceCallback;\n\n  // 简化的统计\n  private stats = {\n    totalCollected: 0,\n    totalValue: 0,\n    fps: 0,\n  };\n\n  private redPacketImage: HTMLImageElement | null = null;\n\n  // 🎯 防抖和调试相关\n  private lastClickTime = 0;\n  private clickDebounceDelay = 100; // 100ms防抖\n  private debugClicks: Array<{ x: number; y: number; time: number; hit: boolean }> = [];\n\n  // 🎆 粒子系统\n  private particles: Particle[] = [];\n  private particlePool: Particle[] = [];\n  private particlePoolSize = 100;\n  private particleConfig: ParticleConfig = {\n    count: 15,\n    speed: { min: 2, max: 8 },\n    size: { min: 3, max: 8 },\n    life: { min: 800, max: 1500 },\n    colors: [\"#FF6B6B\"],\n    gravity: 0.3,\n    friction: 0.98,\n    spread: Math.PI * 2, // 360度散布\n  };\n\n  constructor(canvas: HTMLCanvasElement, config?: Partial<RedPacketRainConfig>) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext(\"2d\")!;\n    this.config = { ...DEFAULT_CONFIG, ...config };\n\n    // 🎯 优化配置处理逻辑\n    this.optimizeConfig();\n\n    this.resizeCanvas();\n    this.initializePool();\n    this.initializeParticlePool();\n    this.bindEvents();\n    this.loadRedPacketImage();\n  }\n\n  private initializePool(): void {\n    for (let i = 0; i < this.poolSize; i++) {\n      this.redPacketPool.push(this.createRedPacket());\n    }\n  }\n\n  // 🎆 初始化粒子对象池\n  private initializeParticlePool(): void {\n    for (let i = 0; i < this.particlePoolSize; i++) {\n      this.particlePool.push(this.createParticle());\n    }\n  }\n\n  // 🎆 创建粒子对象\n  private createParticle(): Particle {\n    return {\n      id: Math.random().toString(36).slice(2, 11),\n      x: 0,\n      y: 0,\n      vx: 0,\n      vy: 0,\n      size: 5,\n      opacity: 1,\n      color: \"#FFD700\",\n      life: 1,\n      maxLife: 1000,\n      gravity: 0.3,\n      friction: 0.98,\n      rotation: 0,\n      rotationSpeed: 0,\n    };\n  }\n\n  // 🎆 从对象池获取粒子\n  private getParticleFromPool(): Particle {\n    return this.particlePool.pop() || this.createParticle();\n  }\n\n  // 🎆 返还粒子到对象池\n  private returnParticleToPool(particle: Particle): void {\n    if (this.particlePool.length < this.particlePoolSize) {\n      this.particlePool.push(particle);\n    }\n  }\n\n  // 🎆 重置粒子属性\n  private resetParticle(particle: Particle, x: number, y: number): void {\n    const config = this.particleConfig;\n    const angle = Math.random() * config.spread;\n    const speed = config.speed.min + Math.random() * (config.speed.max - config.speed.min);\n\n    particle.x = x;\n    particle.y = y;\n    particle.vx = Math.cos(angle) * speed;\n    particle.vy = Math.sin(angle) * speed - Math.random() * 2; // 向上的初始速度\n    particle.size = config.size.min + Math.random() * (config.size.max - config.size.min);\n    particle.initialSize = undefined; // 清除初始大小，让updateParticles重新设置\n    particle.opacity = 1;\n    particle.color = config.colors[Math.floor(Math.random() * config.colors.length)];\n    particle.maxLife = config.life.min + Math.random() * (config.life.max - config.life.min);\n    particle.life = particle.maxLife;\n    particle.gravity = config.gravity;\n    particle.friction = config.friction;\n    particle.rotation = Math.random() * Math.PI * 2;\n    particle.rotationSpeed = (Math.random() - 0.5) * 0.2;\n  }\n\n  private getRedPacketFromPool(): RedPacket {\n    const redPacket = this.redPacketPool.pop() || this.createRedPacket();\n    this.resetRedPacket(redPacket);\n    return redPacket;\n  }\n\n  private returnRedPacketToPool(redPacket: RedPacket): void {\n    if (this.redPacketPool.length < this.poolSize) {\n      this.redPacketPool.push(redPacket);\n    }\n  }\n\n  private getRedPacketData(): any | null {\n    if (!this.config.redPackets || typeof this.config.redPackets === \"number\") {\n      return null;\n    }\n    if (Array.isArray(this.config.redPackets) && this.config.redPackets.length > 0) {\n      const data = this.config.redPackets[this.redPacketDataIndex];\n      this.redPacketDataIndex = (this.redPacketDataIndex + 1) % this.config.redPackets.length;\n      return data;\n    }\n    return null;\n  }\n\n  private isSpecialRedPacket(item: any): boolean {\n    if (!this.config.isSpecialFn) return false;\n    if (typeof this.config.isSpecialFn === \"function\") {\n      return this.config.isSpecialFn(item);\n    }\n    if (typeof this.config.isSpecialFn === \"string\") {\n      return Boolean(item[this.config.isSpecialFn]);\n    }\n    return false;\n  }\n\n  private createRedPacket(): RedPacket {\n    const redPacketData = this.getRedPacketData();\n    const baseRedPacket: RedPacket = {\n      id: Math.random().toString(36).slice(2, 11),\n      x: 0,\n      y: 0,\n      width: this.config.size.width,\n      height: this.config.size.height,\n      speed: 0,\n      rotation: 0,\n      rotationSpeed: 0,\n      scale: 1,\n      opacity: 1,\n      collected: false,\n      value: Math.floor(Math.random() * 100) + 1,\n      type: \"normal\",\n      originalData: null,\n    };\n\n    if (redPacketData && this.isUsingArrayMode()) {\n      // 🎯 数组模式：使用数组数据，可以有特殊红包\n      baseRedPacket.id = redPacketData.id || baseRedPacket.id;\n      baseRedPacket.value = redPacketData.value || baseRedPacket.value;\n      baseRedPacket.type = this.isSpecialRedPacket(redPacketData) ? \"special\" : \"normal\";\n      baseRedPacket.originalData = redPacketData; // 保存原始数据\n    } else {\n      // 🎯 随机模式：只生成普通红包，不使用特殊判断\n      baseRedPacket.type = \"normal\";\n      baseRedPacket.originalData = null;\n    }\n\n    return baseRedPacket;\n  }\n\n  private resetRedPacket(redPacket: RedPacket): void {\n    const redPacketData = this.getRedPacketData();\n\n    // 位置和物理属性\n    redPacket.x = Math.random() * (this.actualWidth - this.config.size.width);\n    redPacket.y = -this.config.size.height;\n    redPacket.speed =\n      Number(this.config.speed.min) + Math.random() * (Number(this.config.speed.max) - Number(this.config.speed.min));\n    redPacket.rotation = 0;\n    redPacket.rotationSpeed = this.config.rotation\n      ? this.config.rotationSpeed.min + Math.random() * (this.config.rotationSpeed.max - this.config.rotationSpeed.min)\n      : 0;\n    redPacket.scale = 0.8 + Math.random() * 0.4;\n    redPacket.opacity = 1;\n    redPacket.collected = false;\n\n    // 数据属性\n    if (redPacketData && this.isUsingArrayMode()) {\n      // 数组模式：使用数组数据，可以有特殊红包\n      redPacket.id = redPacketData.id || redPacket.id;\n      redPacket.value = redPacketData.value || Math.floor(Math.random() * 100) + 1;\n      redPacket.type = this.isSpecialRedPacket(redPacketData) ? \"special\" : \"normal\";\n      redPacket.originalData = redPacketData; // 保存原始数据\n    } else {\n      // 随机模式：只生成普通红包\n      redPacket.value = Math.floor(Math.random() * 100) + 1;\n      redPacket.type = \"normal\"; // 强制为普通红包\n      redPacket.originalData = null; // 清空原始数据\n    }\n  }\n\n  private optimizeConfig(): void {\n    //  redPackets、count 和默认值的处理逻辑\n    if (this.config.redPackets && Array.isArray(this.config.redPackets) && this.config.redPackets.length > 0) {\n      // 优先级1: 如果传了有效数组，使用数组长度作为 count\n      this.config.count = this.config.redPackets.length;\n    } else if (this.config.count === undefined || this.config.count === null || this.config.count <= 0) {\n      // 优先级3: 如果没传有效的 count，使用默认值\n      this.config.count = 20;\n    }\n  }\n\n  // 🎯 判断当前是否使用数组模式\n  private isUsingArrayMode(): boolean {\n    return !!(this.config.redPackets && Array.isArray(this.config.redPackets) && this.config.redPackets.length > 0);\n  }\n\n  private loadRedPacketImage(): void {\n    if (this.config.redPacketImage) {\n      if (typeof this.config.redPacketImage === \"string\") {\n        this.redPacketImage = new Image();\n        this.redPacketImage.src = this.config.redPacketImage;\n      } else {\n        this.redPacketImage = this.config.redPacketImage;\n      }\n    }\n  }\n\n  private resizeCanvas(): void {\n    let width = 800,\n      height = 600;\n\n    if (typeof this.config.containerWidth === \"string\" && this.config.containerWidth.includes(\"%\")) {\n      const parent = this.canvas.parentElement;\n      if (parent) {\n        width = (parent.clientWidth * parseFloat(this.config.containerWidth)) / 100;\n      }\n    } else {\n      width = typeof this.config.containerWidth === \"number\" ? this.config.containerWidth : 800;\n    }\n\n    if (typeof this.config.containerHeight === \"string\" && this.config.containerHeight.includes(\"%\")) {\n      const parent = this.canvas.parentElement;\n      if (parent) {\n        height = (parent.clientHeight * parseFloat(this.config.containerHeight)) / 100;\n      }\n    } else {\n      height = typeof this.config.containerHeight === \"number\" ? this.config.containerHeight : 600;\n    }\n\n    this.canvas.width = this.actualWidth = Math.max(100, Math.min(width, 4000));\n    this.canvas.height = this.actualHeight = Math.max(100, Math.min(height, 4000));\n  }\n\n  private bindEvents(): void {\n    this.canvas.addEventListener(\"click\", this.handleClick.bind(this));\n    this.canvas.addEventListener(\"touchstart\", this.handleTouch.bind(this));\n    window.addEventListener(\"resize\", this.handleResize.bind(this));\n  }\n\n  private handleClick(event: MouseEvent): void {\n    const coords = this.getCanvasCoordinates(event.clientX, event.clientY);\n    this.checkCollision(coords.x, coords.y, \"mouse\");\n  }\n\n  private handleTouch(event: TouchEvent): void {\n    event.preventDefault();\n    const touch = event.touches[0];\n    const coords = this.getCanvasCoordinates(touch.clientX, touch.clientY);\n    this.checkCollision(coords.x, coords.y, \"touch\");\n  }\n\n  // 🎯 优化坐标转换，考虑Canvas缩放和设备像素比\n  private getCanvasCoordinates(clientX: number, clientY: number): { x: number; y: number } {\n    const rect = this.canvas.getBoundingClientRect();\n\n    // 计算Canvas的实际显示尺寸\n    const displayWidth = rect.width;\n    const displayHeight = rect.height;\n\n    // 计算缩放比例\n    const scaleX = this.canvas.width / displayWidth;\n    const scaleY = this.canvas.height / displayHeight;\n\n    // 转换坐标\n    const x = (clientX - rect.left) * scaleX;\n    const y = (clientY - rect.top) * scaleY;\n\n    if (this.config.debugMode) {\n      console.log(`🎯 点击坐标转换:\n        客户端坐标: (${clientX}, ${clientY})\n        Canvas矩形: ${JSON.stringify(rect)}\n        缩放比例: (${scaleX.toFixed(3)}, ${scaleY.toFixed(3)})\n        最终坐标: (${x.toFixed(1)}, ${y.toFixed(1)})`);\n    }\n\n    return { x, y };\n  }\n\n  private handleResize(): void {\n    this.resizeCanvas();\n  }\n\n  private checkCollision(x: number, y: number, inputType: string = \"mouse\"): void {\n    const currentTime = Date.now();\n\n    // 🎯 防抖处理 - 防止快速重复点击\n    if (currentTime - this.lastClickTime < this.clickDebounceDelay) {\n      if (this.config.debugMode) {\n        console.log(`🎯 点击被防抖过滤 (间隔: ${currentTime - this.lastClickTime}ms)`);\n      }\n      return;\n    }\n    this.lastClickTime = currentTime;\n\n    if (this.config.debugMode) {\n      console.log(`🎯 检查碰撞: (${x.toFixed(1)}, ${y.toFixed(1)}) [${inputType}]`);\n    }\n\n    let hitFound = false;\n    for (let i = this.redPackets.length - 1; i >= 0; i--) {\n      const redPacket = this.redPackets[i];\n      if (this.isPointInRedPacket(x, y, redPacket)) {\n        if (this.config.debugMode) {\n          console.log(`🎯 命中红包: ${redPacket.id}, 类型: ${redPacket.type}, 价值: ${redPacket.value}`);\n        }\n        this.collectRedPacket(redPacket, x, y);\n        this.redPackets.splice(i, 1);\n        this.returnRedPacketToPool(redPacket);\n        hitFound = true;\n        break;\n      }\n    }\n\n    // 🎯 记录点击调试信息\n    if (this.config.debugMode) {\n      this.debugClicks.push({ x, y, time: currentTime, hit: hitFound });\n\n      if (!hitFound) {\n        console.log(`🎯 未命中任何红包 - 当前红包数量: ${this.redPackets.length}`);\n        // 显示最近的红包位置\n        this.redPackets.slice(0, 3).forEach((rp, idx) => {\n          const centerX = rp.x + rp.width / 2;\n          const centerY = rp.y + rp.height / 2;\n          const distance = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);\n          console.log(\n            `红包${idx + 1}: 中心(${centerX.toFixed(1)}, ${centerY.toFixed(1)}), 距离: ${distance.toFixed(1)}`\n          );\n        });\n      }\n    }\n  }\n\n  // 判断点是否在红包内\n  private isPointInRedPacket(x: number, y: number, redPacket: RedPacket): boolean {\n    const centerX = redPacket.x + redPacket.width / 2;\n    const centerY = redPacket.y + redPacket.height / 2;\n    const width = redPacket.width * redPacket.scale;\n    const height = redPacket.height * redPacket.scale;\n\n    // 🎯 增加容错范围，让红包更容易点击（增加10%的边界）\n    const toleranceX = width * 0.1;\n    const toleranceY = height * 0.1;\n    const expandedWidth = width + toleranceX;\n    const expandedHeight = height + toleranceY;\n\n    const isInBounds =\n      x >= centerX - expandedWidth / 2 &&\n      x <= centerX + expandedWidth / 2 &&\n      y >= centerY - expandedHeight / 2 &&\n      y <= centerY + expandedHeight / 2;\n\n    if (this.config.debugMode && isInBounds) {\n      console.log(`🎯 红包边界检测:\n        红包中心: (${centerX.toFixed(1)}, ${centerY.toFixed(1)})\n        原始尺寸: ${width.toFixed(1)} x ${height.toFixed(1)}\n        扩展尺寸: ${expandedWidth.toFixed(1)} x ${expandedHeight.toFixed(1)}\n        点击坐标: (${x.toFixed(1)}, ${y.toFixed(1)})\n        距离中心: (${Math.abs(x - centerX).toFixed(1)}, ${Math.abs(y - centerY).toFixed(1)})`);\n    }\n\n    return isInBounds;\n  }\n\n  // 收集红包\n  private collectRedPacket(redPacket: RedPacket, x: number, y: number): void {\n    redPacket.collected = true;\n\n    this.stats.totalCollected++;\n    this.stats.totalValue += redPacket.value;\n\n    // 红包粒子效果\n    if (!this.config.enablePerformanceMode && this.config.isParticle) {\n      this.createRedPacketParticles(redPacket, x, y);\n    }\n\n    if (this.onRedPacketClickCallback) {\n      this.onRedPacketClickCallback({\n        redPacket,\n        x,\n        y,\n        value: redPacket.value,\n      });\n    }\n  }\n\n  // 🎆 创建点击之后红包粒子效果\n  private createRedPacketParticles(redPacket: RedPacket, x: number, y: number): void {\n    const particleCount = this.particleConfig.count;\n\n    // 特殊红包产生更多粒子\n    const actualCount = redPacket.type === \"special\" ? particleCount * 1.5 : particleCount;\n\n    for (let i = 0; i < actualCount; i++) {\n      const particle = this.getParticleFromPool();\n      this.resetParticle(particle, x, y);\n\n      // 特殊红包的粒子有金色光芒效果\n      if (redPacket.type === \"special\") {\n        particle.color = \"#FFD700\"; // 金色\n        particle.size *= 1.3; // 更大\n      }\n\n      this.particles.push(particle);\n    }\n\n    if (this.config.debugMode) {\n      console.log(`🎆 创建了 ${actualCount} 个粒子 [红包类型: ${redPacket.type}]`);\n    }\n  }\n\n  // 🎆 更新粒子状态\n  private updateParticles(deltaTime: number): void {\n    const timeStep = deltaTime / 16.67; // 标准化到60fps\n\n    for (let i = this.particles.length - 1; i >= 0; i--) {\n      const particle = this.particles[i];\n\n      // 更新位置\n      particle.x += particle.vx * timeStep;\n      particle.y += particle.vy * timeStep;\n\n      // 应用重力\n      particle.vy += particle.gravity * timeStep;\n\n      // 应用摩擦力\n      particle.vx *= particle.friction;\n      particle.vy *= particle.friction;\n\n      // 更新旋转\n      particle.rotation += particle.rotationSpeed * timeStep;\n\n      // 更新生命值\n      particle.life -= deltaTime;\n\n      // 根据生命值更新透明度和大小\n      const lifeRatio = Math.max(0, particle.life / particle.maxLife);\n      particle.opacity = lifeRatio;\n\n      // 粒子在生命末期会变小 - 保存初始大小并应用缩放\n      if (!particle.initialSize) {\n        particle.initialSize = particle.size;\n      }\n      const sizeRatio = 0.3 + lifeRatio * 0.7; // 最小30%大小\n      particle.size = particle.initialSize * sizeRatio;\n\n      // 移除死亡的粒子\n      if (particle.life <= 0 || particle.y > this.actualHeight + 50) {\n        this.particles.splice(i, 1);\n        this.returnParticleToPool(particle);\n      }\n    }\n  }\n\n  // 🎆 渲染粒子\n  private renderParticles(): void {\n    const ctx = this.ctx;\n\n    for (const particle of this.particles) {\n      ctx.save();\n\n      ctx.globalAlpha = particle.opacity;\n      ctx.translate(particle.x, particle.y);\n      ctx.rotate(particle.rotation);\n\n      // 创建渐变效果\n      const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, particle.size);\n      gradient.addColorStop(0, particle.color);\n      gradient.addColorStop(0.7, particle.color + \"80\"); // 50% 透明\n      gradient.addColorStop(1, particle.color + \"00\"); // 完全透明\n\n      ctx.fillStyle = gradient;\n      ctx.beginPath();\n      ctx.arc(0, 0, particle.size, 0, Math.PI * 2);\n      ctx.fill();\n\n      // 为特殊粒子添加发光效果\n      if (particle.color === \"#FFD700\" && !this.config.enablePerformanceMode) {\n        ctx.shadowColor = particle.color;\n        ctx.shadowBlur = particle.size * 2;\n        ctx.beginPath();\n        ctx.arc(0, 0, particle.size * 0.5, 0, Math.PI * 2);\n        ctx.fill();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  private spawnRedPacket(): void {\n    const currentTime = Date.now();\n    const spawnInterval = 1000 / this.config.density;\n\n    if (currentTime - this.lastSpawnTime > spawnInterval && this.redPackets.length < this.config.count) {\n      const redPacket = this.getRedPacketFromPool();\n      this.redPackets.push(redPacket);\n      this.lastSpawnTime = currentTime;\n    }\n  }\n\n  private updateRedPackets(deltaTime: number): void {\n    for (let i = this.redPackets.length - 1; i >= 0; i--) {\n      const redPacket = this.redPackets[i];\n\n      redPacket.y += redPacket.speed * (deltaTime / 16.67);\n      if (this.config.rotation) {\n        redPacket.rotation += redPacket.rotationSpeed * (deltaTime / 16.67);\n      }\n\n      if (redPacket.y > this.actualHeight) {\n        this.redPackets.splice(i, 1);\n        this.returnRedPacketToPool(redPacket);\n      }\n    }\n  }\n\n  private renderRedPackets(): void {\n    this.ctx.clearRect(0, 0, this.actualWidth, this.actualHeight);\n\n    if (this.config.customStyles?.backgroundColor) {\n      this.ctx.fillStyle = this.config.customStyles.backgroundColor;\n      this.ctx.fillRect(0, 0, this.actualWidth, this.actualHeight);\n    }\n\n    for (const redPacket of this.redPackets) {\n      this.renderRedPacket(redPacket);\n    }\n  }\n\n  private renderRedPacket(redPacket: RedPacket): void {\n    const ctx = this.ctx;\n    const centerX = redPacket.x + redPacket.width / 2;\n    const centerY = redPacket.y + redPacket.height / 2;\n\n    ctx.save();\n    ctx.globalAlpha = redPacket.opacity;\n    ctx.translate(centerX, centerY);\n\n    if (this.config.rotation) {\n      ctx.rotate(redPacket.rotation);\n    }\n    ctx.scale(redPacket.scale, redPacket.scale);\n\n    if (!this.config.enablePerformanceMode && redPacket.type === \"special\") {\n      ctx.shadowColor = \"#FFD700\";\n      ctx.shadowBlur = 10;\n    }\n\n    if (this.redPacketImage) {\n      ctx.drawImage(\n        this.redPacketImage,\n        -redPacket.width / 2,\n        -redPacket.height / 2,\n        redPacket.width,\n        redPacket.height\n      );\n    } else {\n      this.drawDefaultRedPacket(ctx, redPacket);\n    }\n\n    ctx.restore();\n  }\n\n  private drawDefaultRedPacket(ctx: CanvasRenderingContext2D, redPacket: RedPacket): void {\n    const width = redPacket.width;\n    const height = redPacket.height;\n\n    ctx.fillStyle = redPacket.type === \"special\" ? \"#FFD700\" : \"#FF6B6B\";\n    ctx.fillRect(-width / 2, -height / 2, width, height);\n\n    ctx.strokeStyle = this.config.customStyles?.borderColor || \"#FF4444\";\n    ctx.lineWidth = 2;\n    ctx.strokeRect(-width / 2, -height / 2, width, height);\n\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.font = \"20px Arial\";\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillText(\"￥\", 0, -5);\n\n    if (redPacket.value) {\n      ctx.font = \"10px Arial\";\n      ctx.fillText(redPacket.value.toString(), 0, 8);\n    }\n  }\n\n  private animate(currentTime: number): void {\n    if (!this.isRunning || this.isPaused) return;\n\n    const maxFPS = this.config.enablePerformanceMode ? this.config.maxFPS : this.config.qualityMaxFPS || 144;\n    const targetFrameTime = 1000 / maxFPS;\n    const deltaTime = currentTime - this.lastFrameTime;\n\n    if (deltaTime < targetFrameTime * 0.9) {\n      if (this.isRunning && !this.isPaused) {\n        this.animationId = requestAnimationFrame(this.animate.bind(this));\n      }\n      return;\n    }\n\n    this.lastFrameTime = currentTime;\n    this.updateFPS(currentTime);\n    this.spawnRedPacket();\n    this.updateRedPackets(deltaTime);\n    this.updateParticles(deltaTime); // 🎆 更新粒子\n    this.renderRedPackets();\n    this.renderParticles(); // 🎆 渲染粒子\n\n    if (this.config.debugMode) {\n      this.renderDebugInfo();\n    }\n\n    this.triggerCallbacks();\n\n    if (this.isRunning && !this.isPaused) {\n      this.animationId = requestAnimationFrame(this.animate.bind(this));\n    }\n  }\n\n  private updateFPS(currentTime: number): void {\n    this.frameCount++;\n    if (currentTime - this.lastFpsTime >= 1000) {\n      this.stats.fps = this.frameCount;\n      this.frameCount = 0;\n      this.lastFpsTime = currentTime;\n    }\n  }\n\n  private renderDebugInfo(): void {\n    const ctx = this.ctx;\n    ctx.save();\n\n    // 🎯 调试信息面板\n    ctx.fillStyle = \"rgba(0, 0, 0, 0.8)\";\n    ctx.fillRect(10, 10, 300, 120);\n    ctx.fillStyle = \"#00FF00\";\n    ctx.font = \"14px Arial\";\n    ctx.textAlign = \"left\";\n    ctx.fillText(`FPS: ${this.stats.fps}`, 15, 30);\n    ctx.fillText(`红包数量: ${this.redPackets.length}`, 15, 50);\n    ctx.fillText(`粒子数量: ${this.particles.length}`, 15, 70); // 🎆 粒子数量\n    ctx.fillText(`Canvas尺寸: ${this.actualWidth}x${this.actualHeight}`, 15, 90);\n    ctx.fillText(`点击记录: ${this.debugClicks.length}`, 15, 110);\n\n    // 🎯 绘制红包边界和中心点\n    for (const redPacket of this.redPackets) {\n      const centerX = redPacket.x + redPacket.width / 2;\n      const centerY = redPacket.y + redPacket.height / 2;\n      const width = redPacket.width * redPacket.scale;\n      const height = redPacket.height * redPacket.scale;\n\n      // 扩展的点击区域（10%容错）\n      const toleranceX = width * 0.1;\n      const toleranceY = height * 0.1;\n      const expandedWidth = width + toleranceX;\n      const expandedHeight = height + toleranceY;\n\n      // 绘制原始边界（红色）\n      ctx.strokeStyle = \"rgba(255, 0, 0, 0.5)\";\n      ctx.lineWidth = 1;\n      ctx.strokeRect(centerX - width / 2, centerY - height / 2, width, height);\n\n      // 绘制扩展边界（绿色）\n      ctx.strokeStyle = \"rgba(0, 255, 0, 0.7)\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(centerX - expandedWidth / 2, centerY - expandedHeight / 2, expandedWidth, expandedHeight);\n\n      // 绘制中心点\n      ctx.fillStyle = \"rgba(0, 255, 255, 0.8)\";\n      ctx.fillRect(centerX - 2, centerY - 2, 4, 4);\n    }\n\n    // 🎯 绘制最近的点击位置\n    const currentTime = Date.now();\n    for (const click of this.debugClicks) {\n      const age = currentTime - click.time;\n      if (age < 2000) {\n        // 显示最近2秒的点击\n        const alpha = Math.max(0, 1 - age / 2000);\n        ctx.fillStyle = click.hit ? `rgba(0, 255, 0, ${alpha})` : `rgba(255, 0, 0, ${alpha})`;\n        ctx.fillRect(click.x - 5, click.y - 5, 10, 10);\n\n        // 点击圆圈\n        ctx.strokeStyle = click.hit ? `rgba(0, 255, 0, ${alpha})` : `rgba(255, 0, 0, ${alpha})`;\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.arc(click.x, click.y, 15, 0, Math.PI * 2);\n        ctx.stroke();\n      }\n    }\n\n    ctx.restore();\n  }\n\n  private triggerCallbacks(): void {\n    if (this.onAnimationStateChangeCallback) {\n      this.onAnimationStateChangeCallback({\n        isRunning: this.isRunning,\n        isPaused: this.isPaused,\n        totalCollected: this.stats.totalCollected,\n        currentRedPackets: [...this.redPackets],\n        fps: this.stats.fps,\n      });\n    }\n\n    if (this.onPerformanceUpdateCallback) {\n      this.onPerformanceUpdateCallback({\n        fps: this.stats.fps,\n        renderTime: 0,\n        updateTime: 0,\n        totalRedPackets: this.stats.totalCollected,\n        activeRedPackets: this.redPackets.length,\n      });\n    }\n  }\n\n  // 开始动画\n  public start(): void {\n    if (!this.isRunning) {\n      this.isRunning = true;\n      this.isPaused = false;\n      this.lastFrameTime = performance.now();\n      this.animate(this.lastFrameTime);\n    }\n  }\n  // 停止动画\n  public stop(): void {\n    this.isRunning = false;\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n    }\n  }\n  // 暂停动画\n  public pause(): void {\n    this.isPaused = true;\n  }\n  // 恢复动画\n  public resume(): void {\n    if (this.isPaused && this.isRunning) {\n      this.isPaused = false;\n      this.lastFrameTime = performance.now();\n      this.animate(this.lastFrameTime);\n    }\n  }\n  // 清除红包\n  public clear(): void {\n    this.redPackets.forEach((redPacket) => this.returnRedPacketToPool(redPacket));\n    this.redPackets = [];\n\n    // 🎆 清除粒子\n    this.particles.forEach((particle) => this.returnParticleToPool(particle));\n    this.particles = [];\n\n    this.ctx.clearRect(0, 0, this.actualWidth, this.actualHeight);\n    this.stats.totalCollected = 0;\n    this.stats.totalValue = 0;\n  }\n\n  // 更新配置\n  public updateConfig(newConfig: Partial<RedPacketRainConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n\n    // 🎯 优化配置处理逻辑\n    this.optimizeConfig();\n\n    this.resizeCanvas();\n    if (newConfig.redPacketImage) {\n      this.loadRedPacketImage();\n    }\n    if (newConfig.redPackets) {\n      this.redPacketDataIndex = 0;\n    }\n  }\n  // 获取统计信息\n  public getStats(): PerformanceStats {\n    return {\n      fps: this.stats.fps,\n      renderTime: 0,\n      updateTime: 0,\n      totalRedPackets: this.stats.totalCollected,\n      activeRedPackets: this.redPackets.length,\n    };\n  }\n\n  // 获取收集统计\n  public getCollectionStats(): { totalCollected: number; totalValue: number } {\n    return {\n      totalCollected: this.stats.totalCollected,\n      totalValue: this.stats.totalValue,\n    };\n  }\n\n  // 设置性能模式\n  public setPerformanceMode(enabled: boolean): void {\n    this.config.enablePerformanceMode = enabled;\n  }\n\n  // 获取性能模式\n  public getPerformanceMode(): boolean {\n    return this.config.enablePerformanceMode;\n  }\n\n  // 设置点击事件回调\n  public onRedPacketClick(callback: RedPacketEventCallback): void {\n    this.onRedPacketClickCallback = callback;\n  }\n\n  // 设置动画状态改变回调\n  public onAnimationStateChange(callback: AnimationStateCallback): void {\n    this.onAnimationStateChangeCallback = callback;\n  }\n\n  // 设置性能更新回调\n  public onPerformanceUpdate(callback: PerformanceCallback): void {\n    this.onPerformanceUpdateCallback = callback;\n  }\n\n  // 🎆 设置粒子效果配置\n  public setParticleConfig(config: Partial<ParticleConfig>): void {\n    this.particleConfig = { ...this.particleConfig, ...config };\n  }\n\n  // 🎆 获取粒子效果配置\n  public getParticleConfig(): ParticleConfig {\n    return { ...this.particleConfig };\n  }\n\n  // 销毁引擎\n  public destroy(): void {\n    this.stop();\n    this.clear();\n\n    // 🎯 清理调试数据\n    this.debugClicks = [];\n    this.lastClickTime = 0;\n\n    // 🎆 清理粒子池\n    this.particlePool = [];\n\n    this.canvas.removeEventListener(\"click\", this.handleClick.bind(this));\n    this.canvas.removeEventListener(\"touchstart\", this.handleTouch.bind(this));\n    window.removeEventListener(\"resize\", this.handleResize.bind(this));\n  }\n}\n"],"names":["DEFAULT_CONFIG","containerWidth","containerHeight","count","density","speed","min","max","size","width","height","rotation","rotationSpeed","enablePerformanceMode","maxFPS","qualityMaxFPS","clickEffect","isParticle","constructor","canvas","config","this","redPackets","animationId","isRunning","isPaused","lastFrameTime","frameCount","lastFpsTime","currentFPS","lastSpawnTime","actualWidth","actualHeight","redPacketPool","poolSize","redPacketDataIndex","stats","totalCollected","totalValue","fps","redPacketImage","lastClickTime","clickDebounceDelay","debugClicks","particles","particlePool","particlePoolSize","particleConfig","life","colors","gravity","friction","spread","Math","PI","ctx","getContext","optimizeConfig","resizeCanvas","initializePool","initializeParticlePool","bindEvents","loadRedPacketImage","i","push","createRedPacket","createParticle","id","random","toString","slice","x","y","vx","vy","opacity","color","maxLife","getParticleFromPool","pop","returnParticleToPool","particle","length","resetParticle","angle","cos","sin","initialSize","undefined","floor","getRedPacketFromPool","redPacket","resetRedPacket","returnRedPacketToPool","getRedPacketData","Array","isArray","data","isSpecialRedPacket","item","isSpecialFn","Boolean","redPacketData","baseRedPacket","scale","collected","value","type","originalData","isUsingArrayMode","Number","Image","src","includes","parent","parentElement","clientWidth","parseFloat","clientHeight","addEventListener","handleClick","bind","handleTouch","window","handleResize","event","coords","getCanvasCoordinates","clientX","clientY","checkCollision","preventDefault","touch","touches","rect","getBoundingClientRect","displayWidth","displayHeight","scaleX","scaleY","left","top","debugMode","console","log","JSON","stringify","toFixed","inputType","currentTime","Date","now","hitFound","isPointInRedPacket","collectRedPacket","splice","time","hit","forEach","rp","idx","centerX","centerY","distance","sqrt","expandedWidth","expandedHeight","isInBounds","abs","createRedPacketParticles","onRedPacketClickCallback","particleCount","actualCount","updateParticles","deltaTime","timeStep","lifeRatio","sizeRatio","renderParticles","save","globalAlpha","translate","rotate","gradient","createRadialGradient","addColorStop","fillStyle","beginPath","arc","fill","shadowColor","shadowBlur","restore","spawnRedPacket","spawnInterval","updateRedPackets","renderRedPackets","clearRect","customStyles","backgroundColor","fillRect","renderRedPacket","drawImage","drawDefaultRedPacket","strokeStyle","borderColor","lineWidth","strokeRect","font","textAlign","textBaseline","fillText","animate","targetFrameTime","updateFPS","renderDebugInfo","triggerCallbacks","requestAnimationFrame","click","age","alpha","stroke","onAnimationStateChangeCallback","currentRedPackets","onPerformanceUpdateCallback","renderTime","updateTime","totalRedPackets","activeRedPackets","start","performance","stop","cancelAnimationFrame","pause","resume","clear","updateConfig","newConfig","getStats","getCollectionStats","setPerformanceMode","enabled","getPerformanceMode","onRedPacketClick","callback","onAnimationStateChange","onPerformanceUpdate","setParticleConfig","getParticleConfig","destroy","removeEventListener"],"mappings":"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"}